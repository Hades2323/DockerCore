# Description: Immich is a self-hosted photo management app that allows you to upload, organize, and share your photos with friends and family.
# URL: https://immich.app/
# WARNING: To install Immich, follow our guide: https://immich.app/docs/install/docker-compose
# Make sure to use the docker-compose.yml of the current release:
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
# The compose file on main may not be compatible with the latest release.
name: immich-prod
services:
  immich-server:
    container_name: immich_server
    image: immich-server:latest
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    build:
      context: ../
      dockerfile: server/Dockerfile
    volumes:
      - ${IMMICH_UPLOAD_LOCATION}/photos:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    #env_file:
      #- .env
    networks:
      - t3_proxy
      - socket_proxy
    ports:
      - 2283:2283
    depends_on:
      - immich-redis
      - immich-database
      - postgres
    links:
      - immich-redis
      - immich-database
      - postgres
    restart: unless-stopped
    healthcheck:
      disable: false
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.immich-rtr.entrypoints=websecure"
      - "traefik.http.routers.immich-rtr.rule=Host(`jdown.$DOMAINNAME_00`)"
      # Middlewares
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For No Authentication
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" # For Basic HTTP Authentication
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth-no-crowdsec@file"
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth-webos@file"
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth-external@file"
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file" # For Authelia Authentication
      # HTTP Services
      - "traefik.http.routers.immich-rtr.service=immich-svc"
      - "traefik.http.services.immich-svc.loadbalancer.server.port=2283"
  immich-machine-learning:
    container_name: immich_machine_learning
    image: immich-machine-learning:latest
    # extends:
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference
    build:
      context: ../machine-learning
      dockerfile: Dockerfile
      args:
        - DEVICE=cpu # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference
    networks:
      - t3_proxy
      - socket_proxy
    ports:
      - 3003:3003
    volumes:
      - $DOCKERDIR/appdata/immich/immich-model-cache:/cache
    #env_file:
      #- .env
    restart: unless-stopped
    healthcheck:
      disable: false
  immich-redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:148bb5411c184abd288d9aaed139c98123eeb8824c5d3fce03cf721db58066d8
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped
  immich-database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    #env_file:
      #- .env
    environment:
      POSTGRES_PASSWORD: ${IMMICH_DB_PASSWORD}
      POSTGRES_USER: ${IMMICH_DB_USERNAME}
      POSTGRES_DB: ${IMMICH_DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - $DOCKERDIR/appdata/immich/postgres:/var/lib/postgresql/data
    networks:
      - t3_proxy
      - socket_proxy
    ports:
      - 5432:5432
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: unless-stopped
  # set IMMICH_TELEMETRY_INCLUDE=all in .env to enable metrics
  immich-prometheus:
    container_name: immich_prometheus
    networks:
      - t3_proxy
      - socket_proxy
    ports:
      - 9090:9090
    image: prom/prometheus@sha256:502ad90314c7485892ce696cb14a99fceab9fc27af29f4b427f41bd39701a199
    volumes:
      - $DOCKERDIR/appdata/immich/prometheus.yml:/etc/prometheus/prometheus.yml
      - $DOCKERDIR/appdata/immich/immich-prometheus-data:/prometheus
  # first login uses admin/admin
  # add data source for http://immich-prometheus:9090 to get started
  immich-grafana:
    container_name: immich_grafana
    command: [ './run.sh', '-disable-reporting' ]
    networks:
      - t3_proxy
      - socket_proxy
    ports:
      - 3000:3000
    image: grafana/grafana:11.5.2-ubuntu@sha256:8b5858c447e06fd7a89006b562ba7bba7c4d5813600c7982374c41852adefaeb
    volumes:
      - $DOCKERDIR/appdata/immich/immich-grafana-data:/var/lib/grafana
volumes:
  #$DOCKERDIR/appdata/immich/immich-model-cache:
  #$DOCKERDIR/appdata/immich/immich-prometheus-data:
  #$DOCKERDIR/appdata/immich/gimmich-rafana-data:
  immich-model-cache:
  immich-prometheus-data:
  gimmich-rafana-data:
